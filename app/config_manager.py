import json
import os
from typing import Dict, Optional

from app.logs import logger


def read_json_file(file_path):
    """–ß–∏—Ç–∞–µ—Ç JSON-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏."""
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return json.load(file)
    except json.JSONDecodeError:
        print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —Ñ–∞–π–ª–µ: {file_path}")
        return None


def find_first_json_file_with_string(directory, search_string):
    print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", directory)
    print("üîç –ò—â–µ–º —Å—Ç—Ä–æ–∫—É:", search_string)

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for filename in os.listdir(directory):
        if filename.endswith(".json"):
            file_path = os.path.join(directory, filename)
            print(f"üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {filename}")

            data = read_json_file(file_path)
            if data is None:
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
            if isinstance(data, dict):
                if any(search_string in str(value) for value in data.values()):
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ: {filename}")
                    return os.path.splitext(filename)[
                        0
                    ]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

            elif isinstance(data, list):
                if any(search_string in str(item) for item in data):
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ: {filename}")
                    return os.path.splitext(filename)[
                        0
                    ]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

    print("üîç –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    return None  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π


def get_json_file_names(directory):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–∫–æ–∫ –∏–º—ë–Ω –≤—Å–µ—Ö .json —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."""
    json_file_names = []

    for filename in os.listdir(directory):
        if filename.endswith(".json"):
            json_file_names.append(
                os.path.splitext(filename)[0]
            )  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

    return json_file_names


class UserConfigManager:
    def __init__(self, config_dir: str = "instance/user_configs"):
        self.config_dir = config_dir
        os.makedirs(self.config_dir, exist_ok=True)

    def get_user_config_path(self, user_id: str) -> str:
        return os.path.join(self.config_dir, f"{user_id}.json")

    def save_config(self, user_id: str, config: Dict) -> bool:
        try:
            with open(self.get_user_config_path(user_id), "w") as f:
                json.dump(config, f, separators=(",", ":"))
            logger.info(f"Telegram config saved for user {user_id}")
            return True
        except (IOError, PermissionError) as e:
            logger.error(f"Failed to save Telegram config for user {user_id}: {e}")
            return False

    def load_config(self, user_id: str) -> Optional[Dict]:
        config_path = self.get_user_config_path(user_id)
        if not os.path.exists(config_path):
            logger.warning(f"No config file found for user {user_id}")
            return None

        try:
            with open(config_path, "r") as f:
                return json.load(f)
        except (IOError, json.JSONDecodeError) as e:
            logger.error(f"Error reading config for user {user_id}: {e}")
            return None

    def delete_config(self, user_id: str) -> bool:
        try:
            os.remove(self.get_user_config_path(user_id))
            logger.info(f"Telegram disconnected for user {user_id}")
            return True
        except Exception as e:
            logger.error(f"Error removing config for user {user_id}: {e}")
            return False

    def get_json_file_names(self, directory):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–∫–æ–∫ –∏–º—ë–Ω –≤—Å–µ—Ö .json —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."""
        json_file_names = []

        for filename in os.listdir(directory):
            if filename.endswith(".json"):
                json_file_names.append(
                    os.path.splitext(filename)[0]
                )  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

        return json_file_names

    def check_user_config(self, user_uuid):
        result = user_uuid in self.get_json_file_names(self.config_dir)
        return result

    def find_user_config_for_bot(self, bot_token):
        for filename in os.listdir(self.config_dir):
            if filename.endswith(".json"):
                with open(os.path.join(self.config_dir, filename)) as f:
                    if bot_token in f.read():
                        return filename
        return None

    def get_uuid_by_bot_token(self, bot_token):
        filename = self.find_user_config_for_bot(bot_token)
        if filename:
            user_id = os.path.splitext(filename)[0]
            return user_id
        return None

    def user_uuid_by_authtoken(self, authtoken):
        return self.get_uuid_by_bot_token(authtoken)

    def get_bot_tokens(self):
        bot_tokens = []

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for filename in os.listdir(self.config_dir):
            if filename.endswith(".json"):
                file_path = os.path.join(self.config_dir, filename)
                data = read_json_file(file_path)

                if data and "bot_token" in data:
                    bot_tokens.append(data["bot_token"])

        return bot_tokens

    def get_auth_tokens(self):
        auth_tokens = []

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for filename in os.listdir(self.config_dir):
            if filename.endswith(".json"):
                file_path = os.path.join(self.config_dir, filename)
                data = read_json_file(file_path)

                if data and "auth_token" in data:
                    auth_tokens.append(data["auth_token"])

        return auth_tokens
